require 'pry-byebug'

ATOMIC_BOY_XCODE_PROJECT_FILEPATH = File.absolute_path('../AtomicBoy/AtomicBoy.xcodeproj')
lane :sweep do |options|
    result = multi_scan(
        project: ATOMIC_BOY_XCODE_PROJECT_FILEPATH,
        try_count: 3,
        fail_build: false,
        scheme: 'AtomicBoy',
        output_directory: 'test_results',
        output_types: 'junit',
        output_files: 'report.junit'
    )
    failed_tests = result[:failed_tests]
    unless failed_tests.size.zero?
        git_checkout_newbranch = [
            'git',
            'checkout',
            '-b',
            "suppress_tests_#{Time.now.getutc.to_s.gsub(/[^0-9a-zA-Z]/, '_')}"
        ]
        Actions.sh(git_checkout_newbranch.join(' '))
        suppress_tests(
            xcodeproj: ATOMIC_BOY_XCODE_PROJECT_FILEPATH,
            tests: failed_tests,
            scheme: 'AtomicBoy'
        )
        git_commit(
            path: "#{ATOMIC_BOY_XCODE_PROJECT_FILEPATH}/**/*.xcscheme",
            message: 'Silence failing tests'
        )
        push_to_git_remote
        repo = 'lyndsey-ferguson/medium-post-fragile-tests'
        pr_title = 'Silencing failing tests'
        pr_body = 'Silencing the following failing tests:\r\n'
        failed_tests.each { |failed_test| pr_body << "  #{failed_test}\r\n" }
        pr_body << '\r\n@lyndsey-ferguson please review and merge!'

        UI.message('create_pull_request')
        # create_pull_request(
        #     api_token: File.read(File.absolute_path('../.github-token')).strip,
        #     repo: repo,
        #     title: pr_title,
        #     body: pr_body
        # )

        Dir.glob("../test_results/**/report.junit").each do |junit_report_filepath|
            report_file = File.open(junit_report_filepath) { |f| REXML::Document.new(f) }
            failed_tests.each do |failed_test|
                byebug
                testable, classname, testcase = failed_test.split('/')
                target_testcase = REXML::XPath.first(report_file, "testcase[@name='#{testcase}' and @classname='#{classname}']")
                next if target_testcase.nil?
                
                failure = target_testcase.elements['failure'].text
                create_issue_github(
                    title: "Fix failing test #{failed_test}",
                    body: "`#{failed_test}` is failing due to:" \
                        "```" \
                        "#{failure}" \
                        "```"
                )
            end
        end
    end
end

private_lane :create_issue_github do |options|
    payload = {
        'title' => options[:title],
        'base' => options[:body]
    }

    result = github_api(
        server_url: 'https://api.github.com',
        api_token: File.read(File.absolute_path('../.github-token')).strip,
        http_method: 'POST',
        path: "repos/lyndsey-ferguson/medium-post-fragile-tests/issues",
        body: payload,
        error_handlers: {
        '*' => proc do |result|
            UI.error("GitHub responded with #{result[:status]}: #{result[:body]}")
            return nil
        end
        }
    )

    json = result[:json]
    number = json['number']
    html_url = json['html_url']
    UI.success("Successfully created issue request ##{number}. You can see it at '#{html_url}'")
end